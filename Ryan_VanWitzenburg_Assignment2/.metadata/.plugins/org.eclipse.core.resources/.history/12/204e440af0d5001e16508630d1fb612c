package implementation;

import java.util.Arrays;
import structures.RemovalArray;

public class SwapingArray<E> implements RemovalArray<E> {
	
	private Object[] items;
	private int size;
	
	public SwapingArray() {
		this.items = new Object[1];
		this.size = 0;
	}
	
	 public boolean add(E e) {
	        if (size == items.length) {
	            resizeArray();
	        }
	        items[size++] = e;
	        return true;
	    }

	    @Override
	    public boolean remove(int index) {
	        if (index < 0 || index >= size) {
	            throw new IndexOutOfBoundsException("Index out of bounds");
	        }
	        items[index] = items[size - 1];
	        items[size - 1] = null;
	        size--; 
	        return true;
	    }

	    public boolean remove(E e) {
	        for (int i = 0; i < size; i++) {
	            if (items[i].equals(e)) {
	                remove(i);
	                return true;
	            }
	        }
	        return false;
	    }

	    private void resizeArray() {
	        Object[] newArray = new Object[items.length * 2];
	        System.arraycopy(items, 0, newArray, 0, items.length);
	        items = newArray;
	    }
	    
	    public E find(int index) {
	        if (index < 0 || index >= size) {
	            throw new IndexOutOfBoundsException("Index out of bounds");
	        }
	        return (E) items[index];
	    }

	    public int size() {
	        return size;
	    }
	    
	    public void clear() {
	        items = new Object[1]; 
	        size = 0;
	    }
}
