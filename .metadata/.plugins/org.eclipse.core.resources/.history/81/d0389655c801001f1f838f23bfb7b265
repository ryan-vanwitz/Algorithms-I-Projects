package recursion;

public class Recursion4192024 {
	
	public static void main(String[] args) {
		int result = multiply(6, 9);
		System.out.println(result);	
		
		int result2 = multiply2(7, 9);
		System.out.println(result2);	
		
		int result3 = multiply3(8, 9);
		System.out.println(result3);
		
		int result4 = interval(1,4);
		System.out.println(result4);
		
		int result5 = interval2(1,4);
		System.out.println(result5);
	}

	
	public static int multiply(int x, int y) {	
		if (y == 0) {
			return 0;
		}
		return x + multiply(x, y-1);	
	}
	

	public static int multiply2(int x, int y) {	
	    return (y == 0) ? 0 : (x + multiply(x, y - 1));	
	}
	
	
	
	//  A recursion method that is nice on the memory
	public static int multiply3(int x, int y) {	
		return multiply3(x, y, 0);
	}
	
	public static int multiply3(int x, int y, int result) {	
		if (y == 0) {
			return result;
		}
		return multiply3(x, y-1, result+x);
	}
	// F(5,4) = F(5,4,0) = F(5,3,5) = F(5,2,10) = F(5,1,15) = F(5,0,20)
	
	
	
	// head recursion
	// print numbers throughout interval
	public static int interval(int a, int b) {	
		if (a == b) {
			return b;
		}
		return a * interval(a+1, b);
	}	
	
	// tail recursion
	// print numbers throughout interval
	public static int interval2(int a, int b) {	
		return interval2(a, b, 1);
	}
	public static int interval2(int a, int b, int result) {	
		if (a > b) {
			return result;
		}
		return interval2(a+1, b, (result * a));
	}
	
	
	//head
	public static int integral(int a, int b, int dx) {
		if (a == b) {
			return b;
		}
		return 9;
	}
	
	// tail
	public static double integral2(MyFunction F, Doible a, int b, int dx) {
		return integral2(F(), a, b, dx, 0);
	}
	public static int integral2(F(), int a, int b, int dx, int result) {
		if (a == b) {
			return result;
		}
		return 9
	}
	
	
}







